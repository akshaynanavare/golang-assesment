// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/employee-management/model"
)

// Employee is an autogenerated mock type for the Employee type
type Employee struct {
	mock.Mock
}

type Employee_Expecter struct {
	mock *mock.Mock
}

func (_m *Employee) EXPECT() *Employee_Expecter {
	return &Employee_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Employee) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Employee_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Employee_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Employee_Expecter) Delete(ctx interface{}, id interface{}) *Employee_Delete_Call {
	return &Employee_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Employee_Delete_Call) Run(run func(ctx context.Context, id string)) *Employee_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Employee_Delete_Call) Return(_a0 error) *Employee_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Employee_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Employee_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Employee) GetByID(ctx context.Context, id string) (*model.Employee, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Employee, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Employee); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Employee_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Employee_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Employee_Expecter) GetByID(ctx interface{}, id interface{}) *Employee_GetByID_Call {
	return &Employee_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Employee_GetByID_Call) Run(run func(ctx context.Context, id string)) *Employee_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Employee_GetByID_Call) Return(_a0 *model.Employee, _a1 error) *Employee_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Employee_GetByID_Call) RunAndReturn(run func(context.Context, string) (*model.Employee, error)) *Employee_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, limit, offset
func (_m *Employee) GetList(ctx context.Context, limit int, offset int) ([]*model.Employee, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []*model.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*model.Employee, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.Employee); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Employee_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type Employee_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *Employee_Expecter) GetList(ctx interface{}, limit interface{}, offset interface{}) *Employee_GetList_Call {
	return &Employee_GetList_Call{Call: _e.mock.On("GetList", ctx, limit, offset)}
}

func (_c *Employee_GetList_Call) Run(run func(ctx context.Context, limit int, offset int)) *Employee_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Employee_GetList_Call) Return(_a0 []*model.Employee, _a1 error) *Employee_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Employee_GetList_Call) RunAndReturn(run func(context.Context, int, int) ([]*model.Employee, error)) *Employee_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, emp
func (_m *Employee) Upsert(ctx context.Context, emp *model.Employee) error {
	ret := _m.Called(ctx, emp)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Employee) error); ok {
		r0 = rf(ctx, emp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Employee_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Employee_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - emp *model.Employee
func (_e *Employee_Expecter) Upsert(ctx interface{}, emp interface{}) *Employee_Upsert_Call {
	return &Employee_Upsert_Call{Call: _e.mock.On("Upsert", ctx, emp)}
}

func (_c *Employee_Upsert_Call) Run(run func(ctx context.Context, emp *model.Employee)) *Employee_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Employee))
	})
	return _c
}

func (_c *Employee_Upsert_Call) Return(_a0 error) *Employee_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Employee_Upsert_Call) RunAndReturn(run func(context.Context, *model.Employee) error) *Employee_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmployee creates a new instance of Employee. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployee(t interface {
	mock.TestingT
	Cleanup(func())
}) *Employee {
	mock := &Employee{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
